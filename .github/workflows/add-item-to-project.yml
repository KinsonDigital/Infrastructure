name: ⚙️Add Issue To Project


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      org-name:
        description: The name of the organization that owns the project.
        required: true
        type: string
      org-project-name:
        description: The name of the organization project to add the issue to.
        required: true
        type: string
      repo-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      item-number:
        required: true
        description: "The issue or pr number of the item to add to the project."
        type: string
    secrets:
      cicd-pat:
        description: The CICD personal access token.
        required: true


jobs:
  add_issue_to_project:
    name: Add Item To Project
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Workflow Inputs
        run: |
          if ("${{ inputs.org-name }}" -eq "") {
            Write-Host "::error::The 'org-name' workflow input cannot be empty.";
            exit 1;
          }

          if ("${{ inputs.org-project-name }}" -eq "") {
            Write-Host "::error::The 'org-project-name' workflow input cannot be empty.";
            exit 1;
          }

          if ("${{ inputs.repo-name }}" -eq "") {
            Write-Host "::error::The 'repo-name' workflow input cannot be empty.";
            exit 1;
          }

          if ("${{ inputs.item-number }}" -eq "") {
            Write-Host "::error::The 'item-number' workflow input cannot be empty.";
            exit 1;
          }

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Add To Project
        env:
          REPO_OWNER: "${{ inputs.org-name }}"
          REPO_NAME: "${{ inputs.repo-name }}"
          PROJECT_NAME: "${{ inputs.org-project-name }}"
          ISSUE_OR_PR_NUMBER: "${{ inputs.item-number }}"
          GITHUB_TOKEN: "${{ secrets.cicd-pat }}"
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;
          $scriptUrl = "$scriptUrl/add-item-to-project.ts";

          Write-Host "::notice::NuGet Package Check Script URL: $scriptUrl";

          deno run -ERN "$scriptUrl";
