name: ðŸ¤–Add New Issue To Project


defaults:
  run:
    shell: pwsh


on:
  issues:
    types: opened


env:
  GITHUB_TOKEN: ${{ secrets.CICD_REST_API }}


jobs:
  add_issue_to_project:
    name: Add Issue ${{ github.event.issue.number }} To Project
    runs-on: ubuntu-latest
    steps:
      - name: Add To Project
        run: |
          # Get the raw json data using the GH CLI
          $rawProjectsJsonData = gh project list --owner ${{ vars.ORGANIZATION_NAME }} --format=json;

          Write-Host "::group::Raw Project JSON Data";
          Write-Host $rawProjectsJsonData;
          Write-Host "::endgroup::";

          # Pipe the raw data into jq to format it into a more usable format
          $formattedJsonData = $rawProjectsJsonData | jq "[.projects[] | { title: .title, number: .number }]"

          Write-Host "::group::Formatted Project JSON Data";
          Write-Host $formattedJsonData;
          Write-Host "::endgroup::";

          $orgProjects = $formattedJsonData | ConvertFrom-Json;

          # Get the project that matches the org project name repo variable
          $projects = $orgProjects.Where({ $_.title -eq "${{ vars.ORG_PROJECT_NAME }}" });
          
          if ($projects.Count -eq 0) {
              Write-Host "::error::The project '${{ vars.ORG_PROJECT_NAME }}' was not found.  Check that the organization variable 'ORG_PROJECT_NAME' exists and is set correctly?";
              exit 1;
          }
          
          $projNumber = $projects[0].number;
          $issueUrl = "https://github.com/${{ vars.ORGANIZATION_NAME }}/${{ vars.PROJECT_NAME }}/issues/${{ github.event.issue.number }}";

          # Add the newly created issue to the project
          gh project item-add $projNumber --owner ${{ vars.ORGANIZATION_NAME }} --url $issueUrl;
