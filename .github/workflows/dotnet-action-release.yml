name: ⚙️Perform DotNet Action Release
run-name: ⚙️Perform ${{ inputs.release-type }} Release (${{ inputs.build-config }} Build)


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
      run-branch:
        required: true
        description: The name of the branch to run the workflow.
        type: string
      net-sdk-version:
        required: true
        description: The version of the .NET SDK to use.
        type: string
      relative-release-notes-dir-path:
        required: true
        description: The relative directory path to the release notes.
        type: string
      release-notes-file-name-prefix:
        required: true
        description: The prefix of the release notes file name.  This is what is prefixed before the version number.
        type: string
      build-config:
        required: true
        description: The build configuration to use. This is either 'Debug' or 'Release'.
        default: Debug
        type: string
      runs-on:
        required: false
        description: The type of machine to run the job on.
        type: string
        default: ubuntu-latest
      pr-include-notes-label:
        required: false
        description: The label on a pull request that forces its inclusion in the release notes.
        type: string
        default: ""
      dry-run:
        required: false
        description: If true, the release will not be created.
        default: false
        type: boolean
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.


jobs:
  print_validate_workflow:
    name: Print & Validate DotNet Action Release Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Workflow Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $releaseType = "${{ inputs.release-type }}".Trim().ToLower();

          # Verify that the release type is only 'Preview' or 'Production'
          if ($releaseType -ne "Preview" -and $releaseType -ne "Production") {
            Write-Host "::error::The 'release-type' workflow input is invalid.  Expecting value of 'Preview' or 'Production'.";
            exit 1;
          }


          # Verify that the run branch workflow input is not empty
          if ("${{ inputs.run-branch }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'run-branch' workflow input cannot be empty.";
            exit 1;
          }


          $sdkVersion = "${{ inputs.net-sdk-version }}".Trim().ToLower();
          
          # Verify that the dotnet sdk version has valid syntax
          if ($sdkVersion -match "[0-9]+\.[0-9]+\.[0-9]+") {
            Write-Host "::notice::The 'net-sdk-version' workflow input is valid.";
          } else {
            Write-Host "::error::The 'net-sdk-version' workflow input is invalid.  Expected version format: '#.#.#'";
            exit 1;
          }


          $dirPath = "${{ inputs.relative-release-notes-dir-path }}".Trim().ToLower();;

          # Verify that the relative release notes dir path is not empty
          if ($dirPath -eq "") {
            Write-Host "::error::The 'relative-release-notes-dir-path' workflow input cannot be empty.";
            exit 1;
          }


          $backSlash = "\\";
          $forwardSlash = "/";
          
          # Verify that the relative release notes dir path does not start or end with a with a forward or back slash
          if ($dirPath.StartsWith($backSlash) -or $dirPath.StartsWith($forwardSlash) -or $dirPath.EndsWith($backSlash) -or $dirPath.EndsWith($forwardSlash)) {
            Write-Host "::error::The 'relative-release-notes-dir-path' cannot start or end with a forward or back slash.";
            exit 1;
          }


          # Verify that the release notes file name prefix workflow input is not empty
          if ("${{ inputs.release-notes-file-name-prefix }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'release-notes-file-name-prefix' workflow input cannot be empty.";
            exit 1;
          }


          $buildConfig = "${{ inputs.build-config }}".Trim().ToLower();

          # Verify that the build config is only 'Debug' or 'Release'
          if ($buildConfig -ne "Debug" -and $buildConfig -ne "Release") {
            Write-Host "::error::The build configuration '$buildConfig' is invalid.  Expsting a value of 'Debug' or 'Release'.";
            exit 1;
          }


  validate_branch:
    name: Validate Branch (${{ inputs.run-branch }})
    needs: print_validate_workflow
    runs-on: ubuntu-latest
    steps:
      - name: Validate Branch
        run: |
          $branch = "${{ github.ref_name }}"

          if ($branch -ne "${{ inputs.run-branch }}") {
            Write-Host "::error::The branch '$branch' is invalid. This release can only run on '${{ inputs.run-branch }}' branches."
            exit 1;
          }


  validate_version:
    name: Validate Version
    needs: [print_validate_workflow, validate_branch]
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-csharp-version.yml@v13.5.0
    with:
      project-name: "${{ inputs.project-name }}"
      release-type: "${{ inputs.release-type }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_tag:
    name: Validate Tag
    needs: validate_version
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-tag.yml@v13.5.0
    with:
      project-name: "${{ inputs.project-name }}"
      release-type: "${{ inputs.release-type }}"
      tag-name: "${{ needs.validate_version.outputs.version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_sdk_setup:
    name: Validate SDK Setup
    needs: print_validate_workflow
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-sdk-setup.yml@v13.5.0
    with:
      repo-name: "${{ inputs.project-name }}"


  validate_release_notes_exist:
    name: Validate Release Notes Exist
    needs: validate_version
    runs-on: ubuntu-latest
    steps:
      - name:  Checkout Repo
        uses: actions/checkout@v4

      - name: Release Notes Exist
        run: |
          $relativeDirPath = "${{ inputs.relative-release-notes-dir-path }}";
        
          # Remove all leading forwaard slashes until none are left
          $relativeDirPath = $relativeDirPath.Replace("\", "/");
          $relativeDirPath = $relativeDirPath.TrimStart("/").TrimEnd("/");

          $dirPath = "$env:GITHUB_WORKSPACE/$relativeDirPath";
          $version = "${{ needs.validate_version.outputs.version }}";
          $fileName = "${{ inputs.release-notes-file-name-prefix }}$version.md";
          $filePath = "$dirPath/$fileName";

          if (-not(Test-Path $filePath)) {
            Write-Host "::error::The release notes file '$filePath' does not exist.";
            exit 1;
          }


  validate_github_release:
    name: GitHub Release Does Not Exist
    needs: validate_version
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-github-release.yml@v13.5.0
    with:
      project-name: "${{ inputs.project-name }}"
      version: "${{ needs.validate_version.outputs.version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  build_project:
    name: Build Main Project (${{ inputs.project-name }})
    needs: print_validate_workflow
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v13.5.0
    with:
      project-name: "${{ inputs.project-name }}"
      runs-on: "${{ inputs.runs-on }}"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"
    secrets:
      cicd-pat: ${{ secrets.cicd-pat }}


  run_tests:
    name: Run Tests
    needs: print_validate_workflow
    uses: KinsonDigital/Infrastructure/.github/workflows/run-csharp-tests.yml@v13.5.0
    with:
      project-name: "${{ inputs.project-name }}Tests"
      runs-on: "${{ inputs.runs-on }}"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"
    secrets:
      cicd-pat: ${{ secrets.cicd-pat }}


  perform_release:
    name: Perform ${{ inputs.release-type }} Release
    needs: [
      print_validate_workflow,
      validate_branch,
      validate_version,
      validate_tag,
      validate_sdk_setup,
      validate_release_notes_exist,
      validate_github_release,
      build_project,
      run_tests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4 

    - name: Get GitHub Workspace
      id: base-dir-path
      run: |
        "github-workspace=$env:GITHUB_WORKSPACE" >> $env:GITHUB_OUTPUT;

    - name: Creating ${{ inputs.release-type }} Release
      uses: softprops/action-gh-release@v1
      with: 
        name: "🚀${{ inputs.release-type }} Release - ${{ needs.validate_version.outputs.version }}" 
        body_path: "${{ steps.base-dir-path.outputs.github-workspace }}/${{ inputs.relative-release-notes-dir-path }}/${{ inputs.release-notes-file-name-prefix }}${{ needs.validate_version.outputs.version }}.md"
        files: "${{ steps.base-dir-path.outputs.github-workspace }}/${{ inputs.relative-release-notes-dir-path }}/${{ inputs.release-notes-file-name-prefix }}${{ needs.validate_version.outputs.version }}.md"
        tag_name: "${{ needs.validate_version.outputs.version }}"
        prerelease: ${{ inputs.release-type == 'Preview' }}
        draft: false
