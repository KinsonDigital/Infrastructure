name: ðŸš€Perform DotNet Action Release
run-name: Perform ${{ inputs.release-type }} Release (${{ inputs.build-config }} Build)


defaults:
  run:
    shell: pwsh
    
    
on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: The name of the C# project to validate.
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
      run-branch:
        required: true
        description: The name of the branch to run the workflow.
        type: string
      net-sdk-version:
        required: true
        description: The version of the .NET SDK to use.
        type: string
      relative-release-notes-dir-path:
        required: true
        description: The relative directory path to the release notes.
        type: string
      release-notes-file-name-prefix:
        required: true
        description: The prefix of the release notes file name.  This is what is prefixed before the version number.
        type: string
      build-config:
        required: true
        description: The build configuration to use. This is either 'Debug' or 'Release'.
        default: Debug
        type: string
      cicd-scripts-version:
        required: true
        description: The version of the CICD scripts to use.
        type: string
      pr-include-notes-label:
        required: false
        description: The label on a pull request that forces its inclusion in the release notes.
        type: string
        default: ""
      dry-run:
        required: false
        description: If true, the release will not be created.
        default: false
        type: boolean  


jobs:
  validate_workflow_inputs:
    name: Validate Workflow Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}" -eq "") {
            echo "The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $releaseType = "${{ inputs.release-type }}";

          # Verify that the release type is only 'Preview' or 'Production'
          if ($releaseType -ne "Preview" -and $releaseType -ne "Production") {
            echo "The release type '$releaseType' is invalid.  Valid values are 'Preview' or 'Production'.";
            exit 1;
          }


          # Verify that the run branch workflow input is not empty
          if ("${{ inputs.run-branch }}" -eq "") {
            echo "The 'run-branch' workflow input cannot be empty.";
            exit 1;
          }


          $sdkVersion = "${{ inputs.net-sdk-version }}";
          $sdkVersionRegex = "[0-9]+\.[0-9]+\.[0-9]+";
          
          # Verify that the dotnet sdk version has valid syntax
          if ($sdkVersion -match $sdkVersionRegex) {
            echo "The dotnet SDK version is valid.";
          } else {
            echo "::error::The dotnet SDK version is not valid.\nThe version format is: '#.#.#'";
            exit 1;
          }


          $dirPath = "${{ inputs.relative-release-notes-dir-path }}";
          $backSlash = "\\";
          $forwardSlash = "/";
          
          # Verify that the relative release notes dir path does not start or end with a with a forward or back slash
          if ($dirPath.StartsWith($backSlash) -or $dirPath.StartsWith($forwardSlash) -or $dirPath.EndsWith($backSlash) -or $dirPath.EndsWith($forwardSlash)) {
            echo "The 'relative-release-notes-dir-path' cannot start or end with a forward or back slash.";
            exit 1;
          }


          # Verify that the release notes file name prefix workflow input is not empty
          if ("${{ inputs.release-notes-file-name-prefix }}" -eq "") {
            echo "The 'release-notes-file-name-prefix' workflow input cannot be empty.";
            exit 1;
          }


          $buildConfig = "${{ inputs.build-config }}";

          # Verify that the build config is only 'Debug' or 'Release'
          if ($buildConfig -ne "Debug" -and $buildConfig -ne "Release") {
            echo "The build configuration '$buildConfig' is invalid.  The build configuration can only be 'Debug' or 'Release'.";
            exit 1;
          }


          $cicdScriptVersion = "${{ inputs.cicd-scripts-version }}";
          $cicdScriptVersionRegex = "v[0-9]+\.[0-9]+\.[0-9]+";
          
          # Verify that the cicd script version has valid syntax
          if ($cicdScriptVersion -match $cicdScriptVersionRegex) {
            echo "The cicd script version is valid.";
          } else {
            echo "::error::The cicd script version is not valid.\nThe version format is: 'v#.#.#'";
            exit 1;
          }


  validate_branch:
    name: Validate Branch
    runs-on: ubuntu-latest
    needs: validate_workflow_inputs
    steps:
      - name: Validate Branch
        run: |
          $branch = "${{ github.ref_name }}"

          if ($branch -ne "${{ inputs.run-branch }}") {
            echo "The branch '$branch' is invalid. This release can only run on '${{ inputs.run-branch }}' branches."
            exit 1;
          }

        
  validate_version:
    name: Validate Version
    needs: validate_branch
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-csharp-version.yml@v8.0.0
    with:
      project-name: "${{ inputs.project-name }}"
      release-type: "${{ inputs.release-type }}"
      cicd-scripts-version: "${{ inputs.cicd-scripts-version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_tag:
    name: Validate Tag
    needs: validate_version
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-tag.yml@v8.0.0
    with:
      project-name: "${{ inputs.project-name }}"
      release-type: "${{ inputs.release-type }}"
      tag-name: "${{ needs.validate_version.outputs.version }}"
      cicd-scripts-version: "${{ inputs.cicd-scripts-version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_release_notes_exist:
    name: Validate Release Notes Exist
    needs: validate_version
    runs-on: ubuntu-latest
    steps:
      - name: Release Notes Exist
        run: |
          $dirPath = "${{ github.workspace }}/${{ inputs.relative-release-notes-dir-path }}";
          $fileNamePrefix = "${{ inputs.release-notes-file-name-prefix }}";
          $version = "${{ needs.validate_version.outputs.version }}";
          $fileName = "$fileNamePrefix$version.md";
          $filePath = "$dirPath$fileName";

          if (-not(Test-Path $filePath)) {
            Write-Host "The release notes file '$filePath' does not exist.";
            exit 1;
          }


  validate_github_release:
    name: GitHub Release Does Not Exist
    needs: [validate_version]
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-github-release.yml@v8.0.0
    with:
      project-name: "${{ inputs.project-name }}"
      version: "${{ needs.validate_version.outputs.version }}"
      cicd-scripts-version: "${{ inputs.cicd-scripts-version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  build_project:
    name: Build Main Project
    needs: [validate_tag, validate_release_notes_exist, validate_github_release]
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v8.0.0
    with:
      project-name: "${{ inputs.project-name }}"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"


  run_tests:
    name: Run Tests
    needs: [validate_tag, validate_release_notes_exist, validate_github_release]
    uses: KinsonDigital/Infrastructure/.github/workflows/run-csharp-tests.yml@v8.0.0
    with:
      project-name: "${{ inputs.project-name }}Tests"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"
        

  perform_release:
    name: Perform ${{ inputs.release-type }} Release
    needs: [validate_version, build_project, run_tests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3 

    - name: Creating ${{ inputs.release-type }} Release
      uses: softprops/action-gh-release@v1
      with: 
        name: "ðŸš€${{ inputs.release-type }} Release - v${{ needs.validate_version.outputs.version }}" 
        body_path: "${{ github.workspace }}/${{ inputs.relative-release-notes-dir-path }}/${{ inputs.release-notes-file-name-prefix }}${{ needs.validate_version.outputs.version }}.md"
        files: "${{ github.workspace }}/${{ inputs.relative-release-notes-dir-path }}/${{ inputs.release-notes-file-name-prefix }}${{ needs.validate_version.outputs.version }}.md"
        tag_name: "${{ needs.validate_version.outputs.version }}"
        prerelease: ${{ inputs.release-type == 'Preview' }}
        draft: false
