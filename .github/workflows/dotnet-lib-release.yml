name: ⚙️Perform DotNet Lib Release
run-name: ⚙️Perform ${{ inputs.release-type }} Release (${{ inputs.build-config }} Build)


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
      net-sdk-version:
        required: true
        description: The version of the .NET SDK to use.
        type: string
      release-notes-file-path:
        required: true
        description: The file path to the release notes file to check for existence.
        type: string
      build-config:
        required: true
        description: The build configuration to use. This is either 'Debug' or 'Release'.
        default: Debug
        type: string
      deno-version:
        required: true
        description: The version of Deno to use.  The deno platform is used in all of the composite actions used in this workflow.
        type: string
      enable-deno-cache:
        required: false
        description: If true, enables caching of the Deno modules.
        default: true
        type: boolean
      runs-on:
        required: false
        description: |
          The type of machine to run the job on.
          Reference: https://docs.github.com/en/actions/how-tos/write-workflows/choose-where-workflows-run/choose-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories
        type: string
        default: ubuntu-latest
      transpile-readme:
        required: false
        description: If true, transpiles the README.md file HTML to markdown.
        default: false
        type: boolean
      send-x-release-post:
        required: false
        description: If true, sends a post about the release to X.
        default: false
        type: boolean
      dry-run:
        required: false
        description: If true, the release will not be created.
        default: false
        type: boolean
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.
      nuget-org-api-key:
        required: true
        description: The NuGet.org API key.
      x-consumer-api-key:
        required: false
        description: The X consumer API key.
      x-consumer-api-secret:
        required: false
        description: The X consumer API secret.
      x-access-token-key:
        required: false
        description: The X access token key.
      x-access-token-secret:
        required: false
        description: The X access token secret.


env:
  OWNER_NAME: "${{ vars.ORGANIZATION_NAME }}"
  REPO_NAME: "${{ inputs.project-name }}"


jobs:
  get_and_validate_version:
    name: Get And Validate Version
    runs-on: "${{ inputs.runs-on }}"
    outputs:
      version: ${{ steps.validate-version.outputs.version }}
    steps:
      - name: Get Version
        id: get-version
        uses: KinsonDigital/Infrastructure/actions/get-version@v16.0.0
        with:
          version-file-path: "${{ github.workspace }}/${{ inputs.project-name }}/${{ inputs.project-name }}.csproj"
          deno-version: "${{ inputs.deno-version }}"

      - name: Validate Version
        id: validate-version
        uses: KinsonDigital/Infrastructure/actions/validate-version@v16.0.0
        with:
          version: "${{ steps.get-version.outputs.version}}"
          release-type: "${{ inputs.release-type }}"
          deno-version: "${{ inputs.deno-version }}"


  run_prerelease_validation:
    name: Run Pre-Release Validation
    needs: [get_and_validate_version]
    runs-on: "${{ inputs.runs-on }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set Up Deno (${{ inputs.deno-version }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ inputs.deno-version }}
          cache: ${{ inputs.enable-deno-cache }}

      - name: Validate Tag
        id: tag-check
        uses: KinsonDigital/Infrastructure/actions/validate-tag@v16.0.0
        with:
          repo-owner: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ inputs.project-name }}"
          release-type: "${{ inputs.release-type }}"
          tag-name: "${{ needs.get_and_validate_version.outputs.version }}"
          github-token: "${{ secrets.cicd-pat }}"
          deno-version: "${{ inputs.deno-version }}"
        continue-on-error: true

      - name: Validate SDK Versions
        id: sdk-check
        uses: KinsonDigital/Infrastructure/actions/validate-sdk-versions@v16.0.0
        with:
          base-search-dir-path: "${{ github.workspace }}"
          net-sdk-version: "${{ vars.NET_SDK_VERSION }}"
          deno-version: "${{ inputs.deno-version }}"
        continue-on-error: true

      - name: Release Notes Exist
        id: release-notes-check
        uses: KinsonDigital/Infrastructure/actions/release-notes-exist@v16.0.0
        with:
          release-notes-file-path: "${{ inputs.release-notes-file-path }}"
          deno-version: "${{ inputs.deno-version }}"
          fail-if-does-not-exist: true
        continue-on-error: true
        
      - name: Nuget Package Does Not Exist
        uses: KinsonDigital/Infrastructure/actions/nuget-pkg-exists@v16.0.0
        id: package-check
        with:
          nuget-pkg-name: "${{ vars.ORGANIZATION_NAME }}.${{ inputs.project-name }}"
          nuget-pkg-version: "${{ needs.get_and_validate_version.outputs.version }}"
          deno-version: "${{ inputs.deno-version }}"
        continue-on-error: true

      - name: Milestone Exists
        id: milestone-exists
        uses: KinsonDigital/Infrastructure/actions/milestone-exists@v16.0.0
        with:
          owner-name: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ inputs.project-name }}"
          milestone-name: "${{ needs.get_and_validate_version.outputs.version }}"
          github-token: "${{ secrets.cicd-pat }}"
          deno-version: "${{ inputs.deno-version }}"
        continue-on-error: true

      - name: Validate Milestone Items
        id: milestone-items-check
        uses: KinsonDigital/Infrastructure/actions/milestone-items-closed@v16.0.0
        with:
          owner-name: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ inputs.project-name }}"
          milestone-name: "${{ needs.get_and_validate_version.outputs.version }}"
          github-token: "${{ secrets.cicd-pat }}"
          deno-version: "${{ inputs.deno-version }}"
          fail-if-all-items-not-closed: true
        continue-on-error: true

      - name: GitHub Release Exists
        id: github-release-check
        uses: KinsonDigital/Infrastructure/actions/github-release-exists@v16.0.0
        with:
          owner-name: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ inputs.project-name }}"
          tag-name: "${{ needs.get_and_validate_version.outputs.version }}"
          deno-version: "${{ inputs.deno-version }}"
        continue-on-error: true

      - name: Should Fail Job
        run: |
          $tagCheckFailed = "${{ steps.tag-check.outcome == 'failure' }}";
          $sdkCheckFailed = "${{ steps.sdk-check.outcome == 'failure' }}";
          $notesFileCheckFailed = "${{ steps.release-notes-check.outcome == 'failure' }}";
          $packageCheckFailed = "${{ steps.package-check.outcome == 'failure' }}";
          $milestoneExists = "${{ steps.milestone-exists.outputs.milestone-exists }}";
          $milestoneItemsCheckFailed = "${{ steps.milestone-items-check.outcome == 'failure' }}";
          $githubReleaseCheckFailed = "${{ steps.github-release-check.outcome == 'failure' }}";

          if ($tagCheckFailed -eq "true") {
            Write-Host "::error::Tag already exists.  Please update the version in the 'deno.json' file.";
          }

          if ($sdkCheckFailed -eq "true") {
            Write-Host "::error::One or more of the SDK versions are invalid. Check each '.csproj' file.";
          }

          if ($notesFileCheckFailed -eq "true") {
            Write-Host "::error::The release notes for version '${{ needs.get_and_validate_version.outputs.version }}' do not exist.";
          }

          if ($packageCheckFailed -eq "true") {
            Write-Host "::error::The NuGet package already exists.";
          }

          if ($milestoneExists -eq "false") {
            Write-Host "::error::The milestone '${{ needs.get_and_validate_version.outputs.version }}' does not exist.";
          }

          if ($milestoneItemsCheckFailed -eq "true") {
            Write-Host "::error::The milestone '${{ needs.get_and_validate_version.outputs.version }}' has one or more issues that are not closed or prs that are in draft.";
          }

          if ($githubReleaseCheckFailed -eq "true") {
            Write-Host "::error::The GitHub release already exists.";
          }

          if ($tagCheckFailed -eq "true" `
              -or $sdkCheckFailed -eq "true" `
              -or $notesFileCheckFailed -eq "true" `
              -or $packageCheckFailed -eq "true" `
              -or $milestoneExists -eq "false" `
              -or $milestoneItemsCheckFailed -eq "true" `
              -or $githubReleaseCheckFailed -eq "true") {
            exit 1;
          }


  build_project:
    name: Build Main Project
    needs: [run_prerelease_validation]
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v15.0.0
    with:
      project-name: "${{ inputs.project-name }}"
      runs-on: "${{ inputs.runs-on }}"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"
    secrets:
      cicd-pat: ${{ secrets.cicd-pat }}


  perform_release:
    name: Perform ${{ inputs.release-type }} Release
    runs-on: "${{ inputs.runs-on }}"
    needs:
      [
        get_and_validate_version,
        run_prerelease_validation,
        build_project,
      ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Set Up .NET SDK
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "${{ inputs.net-sdk-version }}"

      - name: Set Up Nuget
        uses: NuGet/setup-nuget@v2

      - name: Set Up Deno (${{ inputs.deno-version }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ inputs.deno-version }}
          cache: ${{ inputs.enable-deno-cache }}

      - name: Transpile README
        if: inputs.transpile-readme == true
        uses: KinsonDigital/Infrastructure/actions/transpile-readme@v16.0.0
        with:
          base-dir-path: "${{ github.workspace }}"
          deno-version: "${{ inputs.deno-version }}"

      - name: Update Copyright
        uses: KinsonDigital/Infrastructure/actions/update-copyright@v16.0.0
        with:
          cs-proj-file-name: "${{ inputs.project-name }}.csproj"
          deno-version: "${{ inputs.deno-version }}"

      - name: Create Nuget Package
        run: |
          dotnet pack `
            "${{ github.workspace }}/${{ inputs.project-name }}/${{ inputs.project-name }}.csproj" `
            -o "${{ github.workspace }}" `
            -c ${{ inputs.build-config }} `
            -p:IncludeSymbols=true `
            -p:SymbolPackageFormat=snupkg;

      - name: Publish Nuget Package
        if: inputs.dry-run == false
        run: |
          $version = "${{ needs.get_and_validate_version.outputs.version }}";
          $version = $version.StartsWith("v") ? $version.Substring(1) : $version;

          # Push the nuget package
          dotnet nuget push `
            "${{ github.workspace }}/${{ vars.ORGANIZATION_NAME }}.${{ inputs.project-name }}.$version.nupkg" `
            --api-key ${{ secrets.nuget-org-api-key }} `
            --source https://api.nuget.org/v3/index.json;

      - name: Send X Release Announcement
        if: inputs.dry-run == false && inputs.send-x-release-post == true
        uses: KinsonDigital/Infrastructure/actions/send-x-release-announcement@v16.0.0
        with:
          repo-owner: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ inputs.project-name }}"
          github-token: "${{ secrets.cicd-pat }}"
          release-x-post-template-repo-name: "${{ vars.RELEASE_X_POST_TEMPLATE_REPO_NAME }}"
          release-x-post-template-branch-name: "${{ vars.RELEASE_X_POST_TEMPLATE_BRANCH_NAME }}"
          relative-release-x-post-template-file-path: "${{ vars.RELATIVE_RELEASE_X_POST_TEMPLATE_FILE_PATH }}"
          discord-invite-code: "${{ vars.DISCORD_INVITE_CODE }}"
          x-broadcast-enabled: "${{ vars.X_BROADCAST_ENABLED }}"
          x-access-token-key: "${{ secrets.x-access-token-key }}"
          x-access-token-secret: "${{ secrets.x-access-token-secret }}"
          x-consumer-api-key: "${{ secrets.x-consumer-api-key }}"
          x-consumer-api-secret: "${{ secrets.x-consumer-api-secret }}"
          deno-version: "${{ inputs.deno-version }}"

      - name: Create GitHub Release ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        if: inputs.dry-run == false
        uses: ncipollo/release-action@v1
        with:
          name: "🚀${{ inputs.release-type }} - ${{ needs.get_and_validate_version.outputs.version }}"
          tag: ${{ needs.get_and_validate_version.outputs.version }}
          owner: ${{ vars.ORGANIZATION_NAME }}
          repo: ${{ inputs.project-name }}
          bodyFile: "${{ github.workspace }}/ReleaseNotes/${{ inputs.release-type }}Releases/Release-Notes-${{ needs.get_and_validate_version.outputs.version }}.md"
          artifacts: "${{ github.workspace }}/ReleaseNotes/${{ inputs.release-type }}Releases/Release-Notes-${{ needs.get_and_validate_version.outputs.version }}.md"
          prerelease: ${{ inputs.release-type }} == 'Preview'
          token: ${{ secrets.CICD_TOKEN }}

      - name: Close Milestone
        if: inputs.dry-run == false
        uses: KinsonDigital/Infrastructure/actions/close-milestone@v16.0.0
        with:
          repo-owner: "${{ vars.ORGANIZATION_NAME }}"
          repo-name: "${{ inputs.project-name }}"
          github-token: "${{ secrets.cicd-pat }}"
          milestone-title: "${{ needs.get_and_validate_version.outputs.version }}"
          deno-version: "${{ inputs.deno-version }}"
