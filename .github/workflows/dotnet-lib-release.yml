name: ⚙️Perform DotNet Lib Release
run-name: ⚙️Perform ${{ inputs.release-type }} Release (${{ inputs.build-config }} Build)


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
      run-branch:
        required: true
        description: The name of the branch to run the workflow.
        type: string
      net-sdk-version:
        required: true
        description: The version of the .NET SDK to use.
        type: string
      relative-release-notes-dir-path:
        required: true
        description: The relative directory path to the release notes.
        type: string
      build-config:
        required: true
        description: The build configuration to use. This is either 'Debug' or 'Release'.
        default: Debug
        type: string
      release-notes-file-name-prefix:
        required: false
        description: The prefix of the release notes file name.  This is what is prefixed before the version number.
        type: string
      runs-on:
        required: false
        description: The type of machine to run the job on.
        type: string
        default: ubuntu-latest
      pr-include-notes-label:
        required: false
        description: The label on a pull request that forces its inclusion in the release notes.
        type: string
        default: ""
      transpile-readme:
        required: false
        description: If true, transpiles the README.md file HTML to markdown.
        default: false
        type: boolean
      send-release-tweet:
        required: false
        description: If true, sends a tweet about the release to twitter.
        default: false
        type: boolean
      dry-run:
        required: false
        description: If true, the release will not be created.
        default: false
        type: boolean
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.
      nuget-org-api-key:
        required: true
        description: The NuGet.org API key.
      twitter-consumer-api-key:
        required: false
        description: The Twitter consumer API key.
      twitter-consumer-api-secret:
        required: false
        description: The Twitter consumer API secret.
      twitter-access-token:
        required: false
        description: The Twitter access token.
      twitter-access-token-secret:
        required: false
        description: The Twitter access token secret.


env:
  OWNER_NAME: "${{ vars.ORGANIZATION_NAME }}"
  REPO_NAME: "${{ inputs.project-name }}"


jobs:
  print_validate_workflow:
    name: Print & Validate DotNet Lib Release Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Workflow Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $releaseType = "${{ inputs.release-type }}".Trim().ToLower();

          # Verify that the release type is only 'Preview' or 'Production'
          if ($releaseType -ne "Preview" -and $releaseType -ne "Production") {
            Write-Host "::error::The 'release-type' workflow input value of '$releaseType' is invalid.  Expecting value of 'Preview' or 'Production'.";
            exit 1;
          }


          # Verify that the run branch workflow input is not empty
          if ("${{ inputs.run-branch }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'run-branch' workflow input cannot be empty.";
            exit 1;
          }


          $sdkVersion = "${{ inputs.net-sdk-version }}".Trim().ToLower();
          $sdkVersionRegex = "[0-9]+\.[0-9]+\.[0-9]+";
          
          # Verify that the dotnet sdk version has valid syntax
          if ($sdkVersion -match $sdkVersionRegex) {
            Write-Host "::notice::The 'net-sdk-version' workflow input is valid.";
          } else {
            Write-Host "::error::The 'net-sdk'version' workflow input is invalid.  Expected version format: '#.#.#'";
            exit 1;
          }


          $dirPath = "${{ inputs.relative-release-notes-dir-path }}".Trim().ToLower();

          # Verify that the relative release notes dir path is not empty
          if ($dirPath -eq "") {
            Write-Host "::error::The 'relative-release-notes-dir-path' workflow input cannot be empty.";
            exit 1;
          }


          $backSlash = "\\";
          $forwardSlash = "/";
          
          # Verify that the relative release notes dir path does not start or end with a with a forward or back slash
          if ($dirPath.StartsWith($backSlash) -or $dirPath.StartsWith($forwardSlash) -or $dirPath.EndsWith($backSlash) -or $dirPath.EndsWith($forwardSlash)) {
            Write-Host "::error::The 'relative-release-notes-dir-path' cannot start or end with a forward or back slash.";
            exit 1;
          }


          $buildConfig = "${{ inputs.build-config }}".Trim().ToLower();

          # Verify that the build config is only 'Debug' or 'Release'
          if ($buildConfig -ne "Debug" -and $buildConfig -ne "Release") {
            Write-Host "::error::The 'build-config' workflow input is invalid.  Expecting a value of 'Debug' or 'Release'.";
            exit 1;
          }


  validate_branch:
    name: Validate Branch
    runs-on: ubuntu-latest
    needs: print_validate_workflow
    steps:
      - name: Validate Branch
        run: |
          $branch = "${{ github.ref_name }}"

          if ($branch -ne "${{ inputs.run-branch }}") {
            Write-Host "::error::The branch '$branch' is invalid. This release can only run on '${{ inputs.run-branch }}' branches."
            exit 1;
          }


  validate_version:
    name: Validate Version
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-csharp-version.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}"
      release-type: "${{ inputs.release-type }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_tag:
    name: Validate Tag
    needs: validate_version
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-tag.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}"
      release-type: "${{ inputs.release-type }}"
      tag-name: "${{ needs.validate_version.outputs.version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_sdk_setup:
    name: Validate SDK Setup
    needs: print_validate_workflow
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-sdk-versions.yml@v13.6.3
    with:
      repo-name: "${{ inputs.project-name }}"
    secrets: 
      cicd-pat: "${{ secrets.cicd-pat }}"


  nuget_pkg_does_not_exist:
    name: Validate NuGet Package Does Not Exist
    needs: validate_version
    uses: KinsonDigital/Infrastructure/.github/workflows/nuget-package-does-not-exist.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}"
      version: "${{ needs.validate_version.outputs.version }}"


  validate_milestone_status:
    name: Validate Milestone Status
    needs: validate_version
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-milestone-status.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}"
      version: "${{ needs.validate_version.outputs.version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  validate_github_release:
    name: GitHub Release Does Not Exist
    needs: [validate_version]
    uses: KinsonDigital/Infrastructure/.github/workflows/validate-github-release.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}"
      version: "${{ needs.validate_version.outputs.version }}"
    secrets:
      cicd-pat: "${{ secrets.cicd-pat }}"


  build_project:
    name: Build Main Project
    needs: print_validate_workflow
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}"
      runs-on: "${{ inputs.runs-on }}"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"
    secrets:
      cicd-pat: ${{ secrets.cicd-pat }}


  run_tests:
    name: Run Tests
    needs: print_validate_workflow
    uses: KinsonDigital/Infrastructure/.github/workflows/run-csharp-tests.yml@v13.6.3
    with:
      project-name: "${{ inputs.project-name }}Tests"
      runs-on: "${{ inputs.runs-on }}"
      build-config: "${{ inputs.build-config }}"
      net-sdk-version: "${{ inputs.net-sdk-version }}"
    secrets:
      cicd-pat: ${{ secrets.cicd-pat }}


  perform_release:
    name: Perform ${{ inputs.release-type }} Release
    runs-on: ubuntu-latest
    needs: [
      validate_version,
      build_project,
      run_tests,
      validate_branch,
      validate_tag,
      validate_sdk_setup,
      nuget_pkg_does_not_exist,
      validate_milestone_status,
      validate_github_release]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ inputs.net-sdk-version }}"

      - name: Setup Nuget
        uses: NuGet/setup-nuget@v1

      - name: Set Up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Create Script URL
        id: script-url
        run: |
          # Construct the URL to the organizations CICD scripts
          $url = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $url = $url.Replace("\", "/").Replace("//", "/");
          $url = $url.EndsWith("/") ? $url.Substring(0, $url.Length - 1) : $url;
          
          Write-Host "::notice::DotNet Lib Release Script URL: $url";
          "url=$url" >> "$env:GITHUB_OUTPUT";

      - name: Transpile README
        if: inputs.transpile-readme == true
        env:
          BASE_DIR_PATH: "${{ github.workspace }}" 
        run: deno run -ERW "${{ steps.script-url.outputs.url }}/transpile-readme.ts";

      - name: Create Nuget Package
        run: |
          dotnet pack `
            "${{ github.workspace }}/${{ inputs.project-name }}/${{ inputs.project-name }}.csproj" `
            -o "${{ github.workspace }}" `
            -c ${{ inputs.build-config }};

      - name: Publish Nuget Package
        if: ${{ inputs.dry-run == false }}
        run: |
          $version = "${{ needs.validate_version.outputs.version }}";
          $version = $version.StartsWith("v") ? $version.Substring(1) : $version;
          
          dotnet nuget push `
            "${{ github.workspace }}/${{ vars.ORGANIZATION_NAME }}.${{ inputs.project-name }}.$version.nupkg" `
            --api-key ${{ secrets.nuget-org-api-key }} `
            --source https://api.nuget.org/v3/index.json;

      - name: Get GitHub Workspace
        id: base-dir-path
        run: |
          "github-workspace=${{ github.workspace }}" >> $env:GITHUB_OUTPUT;

      - name: Create GitHub Release ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        if: ${{ inputs.dry-run == false }}
        env:
          GH_TOKEN: ${{ secrets.CICD_TOKEN }}
        run: |
          $ownerRepoName = "${{ github.repository }}";

          $tag = "${{ needs.validate_version.outputs.version }}".ToLower().Trim();
          $tag = $tag.StartsWith("v") ? $tag : "v$tag";

          $releaseType = "${{ inputs.release-type }}";
          $version = "${{ needs.validate_version.outputs.version }}";

          $title = $version;

          $releaseDirPrefix = $releaseType.ToLower();
          $releaseTypeDir = "$releaseDirPrefix-releases";
          $fullReleaseNotesPath = "${{ github.workspace }}/${{ inputs.relative-release-notes-dir-path }}/${{ inputs.release-notes-file-name-prefix }}${{ needs.validate_version.outputs.version }}.md";

          $isPreRelease = $releaseType -eq "Preview" ? "--prerelease" : "";

          Write-Host "::notice::Release Notes File Path: $fullReleaseNotesPath";

          gh release create $tag `
            -R $ownerRepoName `
            --target ${{ github.ref_name }} `
            -t $title `
            -F $fullReleaseNotesPath `
            $isPreRelease `
            $fullReleaseNotesPath;

      - name: Close Milestone
        if: ${{ inputs.dry-run == false }}
        env:
          MILESTONE_NAME: "${{ needs.validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.cicd-pat }}"
        run: deno run -ERN "${{ steps.script-url.outputs.url }}/close-milestone.ts";

      - name: Send Twitter Announcement
        if: ${{ inputs.send-release-tweet == true && inputs.dry-run == false }}
        env:
          VERSION: "${{ needs.validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.cicd-pat }}"
          RELEASE_TWEET_TEMPLATE_REPO_NAME: "${{ vars.RELEASE_TWEET_TEMPLATE_REPO_NAME }}"
          RELEASE_TWEET_TEMPLATE_BRANCH_NAME: "${{ vars.RELEASE_TWEET_TEMPLATE_BRANCH_NAME }}"
          RELATIVE_RELEASE_TWEET_TEMPLATE_FILE_PATH: "${{ vars.RELATIVE_RELEASE_TWEET_TEMPLATE_FILE_PATH }}"
          DISCORD_INVITE_CODE: "${{ vars.DISCORD_INVITE_CODE }}"
          TWITTER_BROADCAST_ENABLED: "${{ vars.TWITTER_BROADCAST_ENABLED }}"
          TWITTER_ACCESS_TOKEN_KEY: "${{ secrets.twitter-access-token }}"
          TWITTER_ACCESS_TOKEN_SECRET: "${{ secrets.twitter-access-token-secret }}"
          TWITTER_CONSUMER_API_KEY: "${{ secrets.twitter-consumer-api-key }}"
          TWITTER_CONSUMER_API_SECRET: "${{ secrets.twitter-consumer-api-secret }}"
        run: deno run -ERN "${{ steps.script-url.outputs.url }}/send-release-tweet.ts";
