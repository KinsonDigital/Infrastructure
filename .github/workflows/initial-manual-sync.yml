name: 🔄️Sync Issue To PR
run-name: 🔄️Sync Issue To PR (${{ inputs.sync-type }})


defaults:
  run:
    shell: pwsh


on:
  workflow_call: 
    inputs:
      issue-or-pr-number:
        description: Issue or pr number
        required: true
        type: number
      sync-type:
        description: Type of sync to perform. ("manual" or "initial")
        required: true
        type: string
      requested-by:
        description: User who requested the sync
        required: true
        type: string
      branch:
        description: Name of branch. (Only required for initial sync)
        required: false
        type: string
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.


jobs:
  sync_issue_to_pr:
    name: Start Sync Process
    runs-on: ubuntu-latest
    steps:
      - name: Validate Sync Type
        run: |
          $syncType = "${{ inputs.sync-type }}";
          $validSyncType = $syncType -in "manual", "initial";

          if ($validSyncType -eq $false) {
            $msg = "The sync type `${{ inputs.sync-type }}` is not valid.  Valid sync types are 'manual' or 'initial'.";
            $msg += "  Verify that the 'sync-type' input is set correct.";
            Write-Host "::error::$msg";
            exit 1;
          }

      - name: Should Skip
        id: should-skip
        run: |
          $isManualSync = "${{ inputs.sync-type == 'manual' && contains(github.event.comment.body, '[run-sync]') }}";
          $isInitialSync = "${{ inputs.sync-type == 'initial'}}";

          $stepOutput = "skip=false";

          if ($isManualSync -eq "true") {
            Write-Host "::notice::The '[run-sync]' command has been invoked.";
          } elseif ($isInitialSync -eq "true") {
            $branch = "${{ inputs.branch }}";
            $branchRegEx = "${{ vars.FEATURE_BRANCH_REGEX }}";
            $isValidBranch = $branch -match $branchRegEx;

            if ($isValidBranch -eq $true) {
              Write-Host "::notice::The PR has been opened from a valid branch.";
            } else {
              $msg = "::warning::The branch `${{ inputs.branch }}` does not match the regex `${{ vars.FEATURE_BRANCH_REGEX }}`.";
              $msg += "  Verify that the 'FEATURE_BRANCH_REGEX' org or repo variable is set correctly.";
              Write-Host $msg;
            }
          } else {
            Write-Host "::warning::Issue/PR Sync Process Skipped.  Possibly sync command was not exactly '[run-sync]' or incorrect PR head branch.";
            $stepOutput = "skip=true";
          }

          "$stepOutput" >> $env:GITHUB_OUTPUT;

      - name: Set Up Deno
        if: ${{ steps.should-skip.outputs.skip == 'false' }}
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Run Sync
        if: ${{ steps.should-skip.outputs.skip == 'false' }}
        run: |
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}/sync-issue-to-pr.ts";
          
          Write-Host "::notice::Sync Type: ${{ inputs.sync-type }}";
          Write-Host "::notice::Organization Name: ${{ vars.ORGANIZATION_NAME }}";
          Write-Host "::notice::Project Name: ${{ vars.PROJECT_NAME }}";
          Write-Host "::notice::Requested By: ${{ inputs.requested-by }}";
          Write-Host "::notice::PR Number: ${{ inputs.issue-or-pr-number }}";

          <# Deno Args:
            1. Organization name
            2. Project name
            3. User requesting sync
            4. Issue or pull request number
            5. PAT
          #>
          deno run `
            --allow-net `
            "$scriptUrl" `
            "${{ vars.ORGANIZATION_NAME }}" `
            "${{ vars.PROJECT_NAME }}" `
            "${{ inputs.requested-by }}" `
            "${{ inputs.issue-or-pr-number }}" `
            "${{ secrets.cicd-pat }}";
