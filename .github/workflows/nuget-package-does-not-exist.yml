name: ⚙️Check NuGet Package
run-name: ⚙️Check NuGet Package (${{ inputs.version }})


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      version:
        required: true
        description: The version of the package to check.
        type: string


jobs:
  print_validate_workflow:
    name: Print & Validate NuGet Check Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Workflow Inputs
        run: |
          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }
        
        
          $version = "${{ inputs.version }}".Trim().ToLower();
          $version = $version.StartsWith("v") ? $version.SubString(1) : "$version";

          if ($version -match "[0-9]+\.[0-9]+\.[0-9]+(|-preview\.[0-9]+)") {
            Write-Host "::notice::The 'version' workflow input is valid.";
          } else {
            Write-Host "::error::The 'version' workflow input is invalid.  Expected version format: 'v#.#.#' or 'v#.#.#-preview.#'";
            exit 1;
          }


  nuget_pkg_does_not_exist:
    name: Validate NuGet Package Does Not Exist
    needs: print_validate_workflow
    runs-on: ubuntu-latest
    steps:
      - name: Set Up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Package Does Not Exist
        env:
          NUGET_PKG_NAME: "${{ vars.ORGANIZATION_NAME }}.${{ inputs.project-name }}"
          NUGET_PKG_VERSION: "${{ inputs.version }}"
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;
          $scriptUrl = "$scriptUrl/nuget-pkg-does-not-exist.ts";

          Write-Host "::notice::NuGet Package Check Script URL: $scriptUrl";

          deno run -ERN "$scriptUrl";
