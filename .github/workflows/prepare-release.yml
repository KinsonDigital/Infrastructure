name: üöÅPrepare Release


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: The name of the project to validate.
        type: string
      release-type:
        required: true
        description: The type of release to prepare.  Either 'Preview' or 'Production'.
        type: string
      release-version:
        required: true
        description: The version of the release to prepare.
        type: string
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.


jobs:
  print_validate_workflow:
    name: Print & Validate Prepare Release Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Workflow Inputs
        run: |
          $releaseType = "${{ inputs.release-type }}".Trim().ToLower();

          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          if ($releaseType -eq "") {
            Write-Host "::error::The 'release-type' workflow input cannot be empty.";
            exit 1;
          }


          if ($releaseType -ne 'preview' -and $releaseType -ne 'production') {
            Write-Host "::error::The 'release-type' workflow input is invalid.  Expecting value of 'Preview' or 'Production'.";
            exit 1;
          }


          $releaseVersion = "${{ inputs.release-version }}".Trim().ToLower();
          $releaseVersion = $releaseVersion.StartsWith("v") ? $releaseVersion : "v$releaseVersion";

          if ($releaseType -eq "production") {
            if ($releaseVersion -notmatch "v[0-9]+\.[0-9]+\.[0-9]+") {
              Write-Host "::error::The production release version input is invalid. Expected version format: 'v#.#.#'";
              exit 1;
            }
          } else {
            if ($releaseVersion -notmatch "v[0-9]+\.[0-9]+\.[0-9]+-preview\.[0-9]+") {
              Write-Host "::error::The preview release version input is invalid. Expected version format: 'v#.#.#-preview.#'";
              exit 1;
            }
          }


  prepare_release:
    name: Prepare ${{ inputs.release-type }} Release
    needs: print_validate_workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Generate Release Notes
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;
          $scriptUrl = "$scriptUrl/prepare-release.ts";

          <# Deno Args:
            1. Organization name
            2. Project name
            3. Release type - 'production' or 'preview'
            4. Release version
            5. PAT
          #>
          deno run `
            --allow-read --allow-write --allow-net `
            "$scriptUrl" `
            "${{ vars.ORGANIZATION_NAME }}" `
            "${{ inputs.project-name }}" `
            "${{ inputs.release-type }}" `
            "${{ inputs.release-version }}" `
            "${{ secrets.cicd-pat }}";
