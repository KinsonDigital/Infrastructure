name: ðŸš€Release
run-name: ðŸš€${{ inputs.release-type }} Release ${{ inputs.dry-run == true && '(Dry Run)' || '' }}


defaults:
  run:
    shell: pwsh


on:
  workflow_dispatch:
    inputs:
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: choice
        options: [Production, Preview]
      dry-run:
        required: false
        description: Dry Run - Check to run the workflow without creating a release.
        default: false
        type: boolean


env:
  OWNER_NAME: "${{ vars.ORGANIZATION_NAME }}"
  REPO_NAME: "${{ vars.PROJECT_NAME }}"


jobs:
  get_validate_version:
    name: Get & Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Get & Validate Version
        id: get-version
        run: deno -ERW ".github/internal-cicd/scripts/get-validate-version.ts";


  run_prerelease_validation:
    name: Run Pre-Release Validation
    needs: [get_validate_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Build Script Base URL
        id: build-script-base-url
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;

          Write-Host "::notice::Script Base URL: $scriptUrl";

          "url=$scriptUrl" >> $env:GITHUB_OUTPUT;

      - name: Milestone Exists
        id: milestone-exists-check
        continue-on-error: true
        env:
          MILESTONE_TITLE: "${{ needs.get_validate_version.outputs.version }}"
          GITHUB_TOKEN: ${{ secrets.CICD_TOKEN }}
        run: |
          $scriptUrl = "${{ steps.build-script-base-url.outputs.url }}/milestone-exists.ts";

          deno run -ERNS "$scriptUrl";

      - name: Validate Milestone
        id: milestone-check
        env:
          MILESTONE_TITLE: "${{ needs.get_validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"
        continue-on-error: true
        run: |
          $scriptUrl = "${{ steps.build-script-base-url.outputs.url }}/milestone-items-all-closed.ts";

          deno run -ERN "$scriptUrl";

      - name: Lowercase Release Type
        id: release-type
        run: |
          $releaseType = "${{ inputs.release-type }}".ToLower();
          "release-type=$releaseType" > "$env:GITHUB_OUTPUT";

      - name: Release Notes Does Not Exist 
        id: release-notes-check
        continue-on-error: true
        env:
          RELEASE_NOTES_DIR_PATH: "${{ github.workspace }}/release-notes/${{ steps.release-type.outputs.release-type }}-releases"
          VERSION: "${{ needs.get_validate_version.outputs.version }}"
        run: |
          $scriptUrl = "${{ steps.build-script-base-url.outputs.url }}/release-notes-do-not-exist.ts";

          Write-Host "::notice::Validate Release Notes Exist Script URL: $scriptUrl";

          deno run -ER "$scriptUrl";

      - name: GitHub Release Does Not Exist 
        id: github-release-check
        continue-on-error: true
        env:
          TAG_NAME: "${{ needs.get_validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"          
        run: |
          $scriptUrl = "${{ steps.build-script-base-url.outputs.url }}/github-release-does-not-exist.ts";

          Write-Host "::notice::Validate GitHub Release Version Script URL: $scriptUrl";

          deno run -ERN "$scriptUrl";
    
      - name: Should Fail Job
        run: |
          $milestoneExistsCheckFailed = "${{ steps.milestone-exists-check.outcome == 'failure' }}";
          $milestoneCheckFailed = "${{ steps.milestone-check.outcome == 'failure' }}";
          $releaseNotesCheckFailed = "${{ steps.release-notes-check.outcome == 'failure' }}";
          $githubReleaseCheckFailed = "${{ steps.github-release-check.outcome == 'failure' }}";

          if ($milestoneExistsCheckFailed -eq "true") {
            Write-Host "::error::The milestone '${{ needs.get_validate_version.outputs.version }}' does not exist.";
          }

          if ($milestoneCheckFailed -eq "true") {
            Write-Host "::error::The milestone '${{ needs.get_validate_version.outputs.version }}' has one or more issues that are not closed.";
          }

          if ($releaseNotesCheckFailed -eq "true") {
            Write-Host "::error::The release notes do not exist.";
          }

          if ($githubReleaseCheckFailed -eq "true") {
            Write-Host "::error::The GitHub release already exists.";
          }

          if ($workflowVersionsCheckCheckFailed -eq "true") {
            Write-Host "::error::The one or more reusable workflow versions have not been updated.";
          }

          if ($milestoneExistsCheckFailed -eq "true" `
              -or $milestoneCheckFailed -eq "true" `
              -or $releaseNotesCheckFailed -eq "true" `
              -or $githubReleaseCheckFailed -eq "true") {
            exit 1;
          }


  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Build
        run: deno check ./**/*.ts;


  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Lint
        run: |
          $tsFiles = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter *.ts | ForEach-Object { $_.FullName };
          $tsFiles -join "`n";

          deno lint "./**/*.ts";


  perform_release:
    name: Perform ${{ inputs.release-type }} Release
    runs-on: ubuntu-latest
    needs: [get_validate_version, run_prerelease_validation, build, lint]
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CICD_TOKEN }}

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Create Script URL
        id: script-url
        run: |
          # Construct the URL to the organizations CICD scripts
          $url = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $url = $url.Replace("\", "/").Replace("//", "/");
          $url = $url.EndsWith("/") ? $url.Substring(0, $url.Length - 1) : $url;
          
          Write-Host "::notice::DotNet Lib Release Script URL: $url";
          "url=$url" >> "$env:GITHUB_OUTPUT";

      - name: Lowercase Release Type
        id: release-type
        run: |
          $releaseType = "${{ inputs.release-type }}".ToLower();
          "release-type=$releaseType" > "$env:GITHUB_OUTPUT";

      - name: Update Reusable Workflow Versions ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        env:
          BASE_DIR_PATH: "${{ github.workspace }}/.github/workflows"
          NEW_VERSION: "${{ needs.get_validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"
        run: |
          if ("${{ inputs.dry-run == true }}" -eq "true") {
            Write-Host "::notice::Updating 'CICD_SCRIPTS_VERSION' repository variable ...";
            exit 0;
          }

          deno run -ERWN "${{ github.workspace }}/.github/internal-cicd/scripts/update-workflow-versions.ts";

          $releaseType = "${{ inputs.release-type }}";

          git config --global user.email "${{ vars.GIT_CONFIG_EMAIL }}";
          git config --global user.name "CICD Release Script - (On behalf of Calvin Wilkinson)"; 

          git add -A;
          git commit -m "ðŸš€$releaseType (${{ needs.get_validate_version.outputs.version }}) - Update reusable workflow versions";
          git push;

      - name: Create GitHub Release ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        if: ${{ inputs.dry-run == false }}
        uses: ncipollo/release-action@v1
        with:
          name: "ðŸš€${{ inputs.release-type }} - ${{ needs.get_validate_version.outputs.version }}"
          tag: ${{ needs.get_validate_version.outputs.version }}
          owner: ${{ env.OWNER_NAME }}
          repo: ${{ env.REPO_NAME }}
          bodyFile: "${{ github.workspace }}/release-notes/${{ steps.release-type.outputs.release-type }}-releases/Release-Notes-${{ needs.get_validate_version.outputs.version }}.md"
          artifacts: "${{ github.workspace }}/release-notes/${{ steps.release-type.outputs.release-type }}-releases/Release-Notes-${{ needs.get_validate_version.outputs.version }}.md"
          prerelease: ${{ inputs.release-type }} == 'Preview'

      - name: Close Milestone ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        env:
          MILESTONE_NAME: "${{ needs.get_validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"
        run: |
          if ("${{ inputs.dry-run == true }}" -eq "true") {
            Write-Host "::notice::Dry Run: Closing milestone...";
            exit 0;
          }
        
          deno run -ERN "${{ steps.script-url.outputs.url }}/close-milestone.ts";

      - name: Update CICD Script Version Repo Var ${{ inputs.dry-run == true && '(Dry Run)' || '' }}
        env:
          CICD_SCRIPTS_VERSION_REPO_VAR_NAME: "CICD_SCRIPTS_VERSION"
          VERSION: "${{ needs.get_validate_version.outputs.version }}"
          GITHUB_TOKEN: "${{ secrets.CICD_TOKEN }}"
        run: |
          if ("${{ inputs.dry-run == true }}" -eq "true") {
            Write-Host "::notice::Updating 'CICD_SCRIPTS_VERSION' repository variable ...";
            exit 0;
          }

          deno run -EN "${{ github.workspace }}/.github/internal-cicd/scripts/update-cicd-script-version.ts";
