name: ⚙️Resolve CSharp Project File Path


defaults:
  run:
    shell: pwsh
  
  
on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      base-path:
        required: false
        description: The fully qualified base directory path to start the search.
        type: string
    outputs:
      project-file-path:
        description: The resolve csharp project file path.
        value: ${{ jobs.resolve_proj_file_path.outputs.project-file-path }}
    secrets:
      cicd-pat:
        description: "The GitHub Personal Access Token (PAT) used to authenticate to the GitHub API."
        required: true


jobs:
  resolve_proj_file_path:
    name: Resolve Project File Path
    runs-on: ubuntu-latest
    outputs:
      project-file-path: ${{ steps.resolve-file-path.outputs.project-file-path }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Deno (${{ vars.DENO_VERSION }})
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Create Script URL
        id: script-url
        run: |
          $SCRIPT_BASE_URL = "${{ vars.SCRIPT_BASE_URL }}";
          $CICD_SCRIPTS_VERSION="${{ vars.CICD_SCRIPTS_VERSION }}";
          $SCRIPT_RELATIVE_DIR_PATH="${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          
          $NEEDS_TRIMMING = $true;
          
          # Trim all line endings from the URL specific sections
          while ($NEEDS_TRIMMING) {
              $SCRIPT_BASE_URL = $SCRIPT_BASE_URL.TrimEnd("`r");
              $SCRIPT_BASE_URL = $SCRIPT_BASE_URL.TrimEnd("`n");
              $CICD_SCRIPTS_VERSION = $CICD_SCRIPTS_VERSION.TrimEnd("`r");
              $CICD_SCRIPTS_VERSION = $CICD_SCRIPTS_VERSION.TrimEnd("`n");
              $SCRIPT_RELATIVE_DIR_PATH = $SCRIPT_RELATIVE_DIR_PATH.TrimEnd("`r");
              $SCRIPT_RELATIVE_DIR_PATH = $SCRIPT_RELATIVE_DIR_PATH.TrimEnd("`n");
          
              $NEEDS_TRIMMING = $SCRIPT_BASE_URL.EndsWith("`r") -or $SCRIPT_BASE_URL.EndsWith("`n") -or 
              $CICD_SCRIPTS_VERSION.EndsWith("`r") -or $CICD_SCRIPTS_VERSION.EndsWith("`n") -or
              $SCRIPT_RELATIVE_DIR_PATH.EndsWith("`r") -or $SCRIPT_RELATIVE_DIR_PATH.EndsWith("`n");
          }
          
          # Construct the URL to the organizations CICD scripts
          $url = "$SCRIPT_BASE_URL/$CICD_SCRIPTS_VERSION/$SCRIPT_RELATIVE_DIR_PATH";
          $url = $url.Replace("\", "/").Replace("//", "/");
          $url = $url.EndsWith("/") ? $url.Substring(0, $url.Length - 1) : $url;
          
          Write-Host "::notice::DotNet Lib Release Script URL: $url";
          "url=$url" >> "$env:GITHUB_OUTPUT";

      - name: Resolve Project File Path
        id: resolve-file-path
        env:
          PROJECT_NAME: "${{ vars.PROJECT_NAME }}"
          BASE_DIR_PATH: "${{ inputs.base-path == '' && github.workspace || inputs.base-path }}"
          GITHUB_TOKEN: ${{ secrets.cicd-pat }}
        run: deno run -ERW "${{ steps.script-url.outputs.url }}/resolve-csproj.ts";
