name: Validate CSharp Version


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
      cicd-scripts-version:
        required: true
        description: The version of the CICD scripts to use.
        type: string
    outputs:
      version:
        description: The version pulled from the csproj file.
        value: ${{ jobs.validate_version.outputs.version }}
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.
        


jobs:
  validate_workflow_inputs:
    name: Validate Workflow Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}" -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $releaseType = "${{ inputs.release-type }}";

          # Verify that the release type is only 'Preview' or 'Production'
          if ($releaseType -ne "Preview" -and $releaseType -ne "Production") {
            Write-Host "::error::The release type '$releaseType' is invalid.  Valid values are 'Preview' or 'Production'.";
            exit 1;
          }


          $cicdScriptVersion = "${{ inputs.cicd-scripts-version }}";
          $cicdScriptVersionRegex = "v[0-9]+\.[0-9]+\.[0-9]+";
          
          # Verify that the cicd script version has valid syntax
          if ($cicdScriptVersion -match $cicdScriptVersionRegex) {
            Write-Host "::notice::The cicd script version is valid.";
          } else {
            Write-Host "::error::The cicd script version is not valid.\nThe version format is: 'v#.#.#'";
            exit 1;
          }


  build_script_url:
    name: Build Script URL
    uses: KinsonDigital/Infrastructure/.github/workflows/create-script-url.yml@v8.2.0
    with:
      project-name: ${{ inputs.project-name }}
      cicd-scripts-version: ${{ inputs.cicd-scripts-version }}


  validate_version:
    name: Get And Validate Version
    runs-on: ubuntu-latest
    needs: build_script_url
    outputs:
      version: ${{ steps.validate-version.outputs.version }}
    steps:
      - name: Get Version From Project File
        id: get-version
        uses: KinsonDigital/VersionMiner@v1.0.0-preview.5
        with:
          repo-owner: ${{ vars.ORGANIZATION_NAME }}
          repo-name: ${{ inputs.project-name }}
          repo-token: ${{ secrets.cicd-pat }}
          branch-name: '${{ github.ref_name }}'
          file-format: 'xml' # Not case sensitive
          file-path: '${{ inputs.project-name }}/${{ inputs.project-name }}.csproj'
          version-keys: Version
        
      - name: Set Up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
        
      - name: Validate Version
        id: validate-version
        run: |
          $scriptUrl = "${{ needs.build_script_url.outputs.script-url }}/validate-version.ts";

          # Get the release version and make sure it starts with the letter 'v'
          $releaseVersion = "${{ steps.get-version.outputs.version }}";

          Write-Host "::notice::Release Version Before Mutation: $releaseVersion";
          $releaseVersion = $releaseVersion.StartsWith("v") ? $releaseVersion : "v" + $releaseVersion;
          Write-Host "::notice::Release Version After Mutation: $releaseVersion";

          # Set the output of this step
          "version=$releaseVersion" >> $env:GITHUB_OUTPUT;

          <# Deno Args:
            1. Version
            2. Version Type
          #>
          deno run `
            "$scriptUrl" `
            "$releaseVersion" `
            "${{ inputs.release-type }}";
