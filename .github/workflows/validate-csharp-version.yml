name: Validate CSharp Version


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
    outputs:
      version:
        description: The version pulled from the csproj file.
        value: ${{ jobs.validate_version.outputs.version }}
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.
        


jobs:
  validate_workflow_inputs:
    name: Print & Validate DotNet Version Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $releaseType = "${{ inputs.release-type }}".Trim().ToLower();

          # Verify that the release type is only 'Preview' or 'Production'
          if ($releaseType -ne "Preview" -and $releaseType -ne "Production") {
            Write-Host "::error::The release type '$releaseType' is invalid.  Expecting value of 'Preview' or 'Production'.";
            exit 1;
          }


  validate_version:
    name: Get And Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate-version.outputs.version }}
    steps:
      - name: Get Version From Project File
        id: get-version
        uses: KinsonDigital/VersionMiner@v1.0.0-preview.5
        with:
          repo-owner: ${{ vars.ORGANIZATION_NAME }}
          repo-name: ${{ inputs.project-name }}
          repo-token: ${{ secrets.cicd-pat }}
          branch-name: '${{ github.ref_name }}'
          file-format: 'xml' # Not case sensitive
          file-path: '${{ inputs.project-name }}/${{ inputs.project-name }}.csproj'
          version-keys: Version
        
      - name: Set Up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{  vars.DENO_VERSION }}
        
      - name: Validate Version
        id: validate-version
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;
          $scriptUrl = "$scriptUrl/validate-version.ts";

          Write-Host "::notice::Validate DotNet Version Script URL: $scriptUrl";

          # Get the release version and make sure it starts with the letter 'v'
          $releaseVersion = "${{ steps.get-version.outputs.version }}".Trim().ToLower();
          $releaseVersion = $releaseVersion.StartsWith("v") ? $releaseVersion : "v$releaseVersion";

          # Set the output of this step
          "version=$releaseVersion" >> $env:GITHUB_OUTPUT;

          <# Deno Args:
            1. Version
            2. Version type
          #>
          deno run `
            "$scriptUrl" `
            "$releaseVersion" `
            "${{ inputs.release-type }}";
