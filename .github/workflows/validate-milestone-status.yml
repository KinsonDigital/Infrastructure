name: ⚙️Validate Release Notes


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      version:
        required: true
        description: The version of the milestone to validate.
        type: string
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.

env:
  OWNER_NAME: "${{ vars.ORGANIZATION_NAME }}"
  REPO_NAME: "${{ INPUTS.project-name }}"


jobs:
  print_validate_workflow:
    name: Print & Validate Milestone Status Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Print Environment Variables
        run: Get-ChildItem -Path Env:* | Sort-Object Name

      - name: Validate Workflow Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $version = "${{ inputs.version }}".Trim().ToLower();
          $version = $version.StartsWith("v") ? $version : "v$version";

          # Verify that the version workflow input is valid
          if ($version -match "v[0-9]+\.[0-9]+\.[0-9]+(|-preview\.[0-9]+)") {
            Write-Host "::notice::The 'version' workflow input is valid.";
          } else {
            Write-Host "::error::The 'version' workflow input is invalid.  Expected version format: 'v#.#.#(-preview.#)'";
            exit 1;
          }

          $orgName = "${{ vars.ORGANIZATION_NAME }}";

          if([string]::IsNullOrEmpty($orgName)) {
            Write-Host "::error::The 'ORGANIZATION_NAME' environment variable does not exist or is not set.";
            exit 1;
          }


  validate_milestone_status:
    name: Validate Milestone Status
    needs: print_validate_workflow
    runs-on: ubuntu-latest
    steps:
      - name: Set Up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Create Script URL
        id: script-url
        run: |
          # Construct the URL to the organizations CICD scripts
          $url = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $url = $url.Replace("\", "/").Replace("//", "/");
          $url = $url.EndsWith("/") ? $url.Substring(0, $url.Length - 1) : $url;

          Write-Host "::notice::DotNet Lib Release Script URL: $url";
          "url=$url" >> "$env:GITHUB_OUTPUT";

      - name: Milestone Exists
        env:
          MILESTONE_TITLE: "${{ inputs.version }}"
          GITHUB_TOKEN: ${{ secrets.cicd-pat }}
        run: deno run -ERNS "${{ steps.script-url.outputs.url }}/milestone-exists.ts";

      - name: Validate Milestone
        id: milestone-check
        env:
          OWNER_NAME: "${{ vars.ORGANIZATION_NAME }}"
          REPO_NAME: "${{ inputs.project-name }}"
          MILESTONE_TITLE: "${{ inputs.version }}"
          GITHUB_TOKEN: "${{ secrets.cicd-pat }}"
        continue-on-error: true
        run: |
          $scriptUrl = "${{ steps.script-url.outputs.url }}/milestone-items-all-closed.ts";

          deno run -EN "$scriptUrl";
