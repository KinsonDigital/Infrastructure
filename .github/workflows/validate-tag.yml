name: Validate Tag


defaults:
  run:
    shell: pwsh


on:
  workflow_call:
    inputs:
      project-name:
        required: true
        description: "The name of the C# project to validate."
        type: string
      release-type:
        required: true
        description: The type of release to validate.  Either 'Preview' or 'Production'.
        type: string
      tag-name:
        required: true
        description: The name of the tag to validate.
        type: string
    secrets:
      cicd-pat:
        required: true
        description: The CICD personal access token.
      
        
jobs:
  validate_workflow_inputs:
    name: Print & Validate Tag Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          # Verify that the project name workflow input is not empty
          if ("${{ inputs.project-name }}".Trim().ToLower() -eq "") {
            Write-Host "::error::The 'project-name' workflow input cannot be empty.";
            exit 1;
          }


          $releaseType = "${{ inputs.release-type }}".Trim().ToLower();

          # Verify that the release type is only 'Preview' or 'Production'
          if ($releaseType -ne "Preview" -and $releaseType -ne "Production") {
            Write-Host "::error::The 'release-type' workflow input is invalid.  Expecting value of 'Preview' or 'Production'.";
            exit 1;
          }


          $tagName = "${{ inputs.tag-name }}".Trim().ToLower();

          if ($releaseType -eq "production") {
            if ($tagName -notmatch "v[0-9]+\.[0-9]+\.[0-9]+") {
              Write-Host "::error::The 'tag-name' workflow input is invalid. Expected version format: 'v#.#.#'";
              exit 1;
            }
          } else {
            if ($tagName -notmatch "v[0-9]+\.[0-9]+\.[0-9]+-preview\.[0-9]+") {
              Write-Host "::error::The 'tag-name' workflow input is invalid. Expected version format: 'v#.#.#-preview.#'";
              exit 1;
            }
          }


  validate_tag:
    name: Validate Tag
    runs-on: ubuntu-latest
    steps:
      - name: Set Up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ vars.DENO_VERSION }}

      - name: Validate Tag
        run: |
          # Construct the URL to the organizations CICD scripts
          $scriptUrl = "${{ vars.SCRIPT_BASE_URL }}/${{ vars.CICD_SCRIPTS_VERSION }}/${{ vars.SCRIPT_RELATIVE_DIR_PATH }}";
          $scriptUrl = $scriptUrl.Replace("\", "/").Replace("//", "/");
          $scriptUrl = $scriptUrl.EndsWith("/") ? $scriptUrl.Substring(0, $scriptUrl.Length - 1) : $scriptUrl;
          $scriptUrl = "$scriptUrl/validate-tag.ts";

          Write-Host "::notice::Validate Tag Script URL: $scriptUrl";
        
          <# Deno Args:
            1. Repo name
            2. Tag type
            3. Release type - Either 'Preview' or 'Production'
            3. Tag name - This is the version
            4. PAT
          #>
          deno run `
            --allow-net `
            "$scriptUrl" `
            "${{ inputs.project-name }}" `
            "${{ inputs.release-type }}" `
            "${{ inputs.tag-name }}" `
            "${{ secrets.cicd-pat }}";
